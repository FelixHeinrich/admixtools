// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_opt_A
arma::mat cpp_opt_A(const arma::mat& B, const arma::mat& xmat, const arma::mat& qinv, double fudge);
RcppExport SEXP _admixtools_cpp_opt_A(SEXP BSEXP, SEXP xmatSEXP, SEXP qinvSEXP, SEXP fudgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type fudge(fudgeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_opt_A(B, xmat, qinv, fudge));
    return rcpp_result_gen;
END_RCPP
}
// cpp_opt_B
arma::mat cpp_opt_B(const arma::mat& A, const arma::mat& xmat, const arma::mat& qinv, double fudge);
RcppExport SEXP _admixtools_cpp_opt_B(SEXP ASEXP, SEXP xmatSEXP, SEXP qinvSEXP, SEXP fudgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type fudge(fudgeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_opt_B(A, xmat, qinv, fudge));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qpadm_weights
arma::vec cpp_qpadm_weights(const arma::mat& xmat, const arma::mat& qinv, int rnk, double fudge, int iterations);
RcppExport SEXP _admixtools_cpp_qpadm_weights(SEXP xmatSEXP, SEXP qinvSEXP, SEXP rnkSEXP, SEXP fudgeSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< int >::type rnk(rnkSEXP);
    Rcpp::traits::input_parameter< double >::type fudge(fudgeSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qpadm_weights(xmat, qinv, rnk, fudge, iterations));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_weights_covariance
arma::mat cpp_get_weights_covariance(arma::cube f4_blocks, arma::mat qinv, double fudge);
RcppExport SEXP _admixtools_cpp_get_weights_covariance(SEXP f4_blocksSEXP, SEXP qinvSEXP, SEXP fudgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type f4_blocks(f4_blocksSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type fudge(fudgeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_weights_covariance(f4_blocks, qinv, fudge));
    return rcpp_result_gen;
END_RCPP
}
// cpp_opt_edge_lengths
arma::vec cpp_opt_edge_lengths(const arma::mat& ppwts_2d, const arma::mat& ppinv, const arma::vec& f3_jest, Function qpsolve);
RcppExport SEXP _admixtools_cpp_opt_edge_lengths(SEXP ppwts_2dSEXP, SEXP ppinvSEXP, SEXP f3_jestSEXP, SEXP qpsolveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ppwts_2d(ppwts_2dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ppinv(ppinvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f3_jest(f3_jestSEXP);
    Rcpp::traits::input_parameter< Function >::type qpsolve(qpsolveSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_opt_edge_lengths(ppwts_2d, ppinv, f3_jest, qpsolve));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fill_pwts
void cpp_fill_pwts(arma::mat& pwts, const arma::vec& weights, const arma::mat& path_edge_table, const arma::mat& path_admixedge_table, int numpaths);
RcppExport SEXP _admixtools_cpp_fill_pwts(SEXP pwtsSEXP, SEXP weightsSEXP, SEXP path_edge_tableSEXP, SEXP path_admixedge_tableSEXP, SEXP numpathsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pwts(pwtsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type path_edge_table(path_edge_tableSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type path_admixedge_table(path_admixedge_tableSEXP);
    Rcpp::traits::input_parameter< int >::type numpaths(numpathsSEXP);
    cpp_fill_pwts(pwts, weights, path_edge_table, path_admixedge_table, numpaths);
    return R_NilValue;
END_RCPP
}
// cpp_optimweightsfun
double cpp_optimweightsfun(arma::vec weights, List args);
RcppExport SEXP _admixtools_cpp_optimweightsfun(SEXP weightsSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< List >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_optimweightsfun(weights, args));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_admixtools_cpp_opt_A", (DL_FUNC) &_admixtools_cpp_opt_A, 4},
    {"_admixtools_cpp_opt_B", (DL_FUNC) &_admixtools_cpp_opt_B, 4},
    {"_admixtools_cpp_qpadm_weights", (DL_FUNC) &_admixtools_cpp_qpadm_weights, 5},
    {"_admixtools_cpp_get_weights_covariance", (DL_FUNC) &_admixtools_cpp_get_weights_covariance, 3},
    {"_admixtools_cpp_opt_edge_lengths", (DL_FUNC) &_admixtools_cpp_opt_edge_lengths, 4},
    {"_admixtools_cpp_fill_pwts", (DL_FUNC) &_admixtools_cpp_fill_pwts, 5},
    {"_admixtools_cpp_optimweightsfun", (DL_FUNC) &_admixtools_cpp_optimweightsfun, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_admixtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toposearch.R
\name{find_graphs}
\alias{find_graphs}
\title{Find well fitting admixture graphs}
\usage{
find_graphs(f2_data, pops = NULL, outpop = NULL, numrep = 10,
  numgraphs = 50, numgen = 5, numsel = 5, numadmix = 0,
  keep = c("all", "best", "last"), f2_denom = 1, cpp = TRUE,
  initgraph = NULL, mutfuns = c("spr_leaves", "spr_all", "swap_leaves",
  "move_admixedge_once", "flipadmix_random"), store_intermediate = NULL,
  parallel = TRUE, stop_at = NULL, debug = FALSE,
  fudge_cov = 1e-05, verbose = TRUE, ...)
}
\arguments{
\item{f2_data}{A 3d array of blocked f2 statistics, output of \code{\link{f2_from_precomp}}.
alternatively, a directory with precomputed data. see \code{\link{extract_f2}} and \code{\link{extract_indpairs}}.}

\item{pops}{Populations for which to fit admixture graphs}

\item{outpop}{Outgroup population}

\item{numrep}{Number of independent repetitions (each repetition can be run in parallel)}

\item{numgraphs}{Number of graphs in each generation}

\item{numgen}{Number of generations}

\item{numsel}{Number of graphs which are selected in each generation. Should be less than \code{numgraphs}.}

\item{numadmix}{Number of admixture events within each graph}

\item{keep}{By default (\code{all}), all evaluated graphs will be returned. \code{best} will only return the best fitting
graph from each repeat and each generation. \code{last} will return all graphs from the last generation.}

\item{f2_denom}{Scales f2-statistics. A value of around 0.278 converts f2 to Fst.}

\item{cpp}{Use C++ functions. Setting this to \code{FALSE} will be slower but can help with debugging.}

\item{initgraph}{Optional graph to start with. If \code{NULL}, optimization will start with random graphs.}

\item{mutfuns}{The names of funcations used to modify graphs.
\itemize{
\item \code{spr_leaves} Subtree prune and regraft leaves. Cuts a leaf node and attaches it to a random other edge in the graph.
\item \code{spr_all} Subtree prune and regraft. Cuts any edge and attaches the new orphan node to a random other edge in the graph, keeping the number of admixture nodes constant.
\item \code{swap_leaves} Swaps two leaf nodes.
\item \code{move_admixedge_once} Moves an admixture edge to a nearby location.
\item \code{flipadmix_random} Flips the direction of an admixture edge (if possible).
}}

\item{store_intermediate}{Path and prefix of files for intermediate results to \code{.rds}. Can be useful if \code{find_graphs} doesn't finish sucessfully.}

\item{parallel}{Parallelize over repeats (if \code{numrep > 1}) or graphs (if \code{numrep == 1}) by replacing \code{purrr::map} with \code{furrr::future_map}. Will only be effective if \code{future::plan()} has been set.}

\item{stop_at}{Stop execution after finishing the generation running at \code{stop_at} seconds. Currently not working.}

\item{debug}{If \code{TRUE} each repeat is run sequentially in a loop and not via \code{\link{furrr::map}}).
Errors will interrupt execution. This is the default if \code{numrep = 1}}

\item{fudge_cov}{Regularization term added to the covariance matrix of estimated f3 statistics (after scaling by the matrix trace).}

\item{verbose}{Print progress updates}

\item{...}{Additional arguments passed to \code{qpgraph}}

\item{verbose}{Print progress updates}
}
\value{
a nested data frame with one model per line
}
\description{
This function generates and evaluates admixture graphs in \code{numgen} iterations across \code{numrep} independent repeats
to find well fitting admixturegraphs. It uses the function \code{\link{future_map}} from the \code{\link{furrr}}
package to parallelize across the independent repeats. The function \code{\link{future::plan}} can be called
to specify the details of the parallelization. This can be used to parallelize across cores or across nodes on
a compute cluster. Setting \code{numadmix} to 0 will search for well fitting trees, which is much faster than searching
for admixture graphs with many admixture nodes.
}
\examples{
\dontrun{
find_graphs(example_f2_blocks, numrep = 200, numgraphs = 100,
            numgen = 20, numsel = 5, numadmix = 3)
}
}
